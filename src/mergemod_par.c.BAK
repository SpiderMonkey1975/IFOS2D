/*-----------------------------------------------------------------------------------------
 * Copyright (C) 2016  For the list of authors, see file AUTHORS.
 *
 * This file is part of IFOS.
 * 
 * IFOS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2.0 of the License only.
 * 
 * IFOS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with IFOS. See file COPYING and/or <http://www.gnu.org/licenses/gpl-2.0.html>.
-----------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------
 *   merge model files written by the different processes to 
 *   a single file                                 
 *   - If VERBOSE==1, then this function will be silent
 *
 *  ----------------------------------------------------------------------*/

#include "fd.h"
#include <mpi.h>

void mergemod_par( char modfile[STRING_SIZE], float ** data ){

     extern int NYG, NPROCX, NPROCY, NPROC, NX, NY, NYG, POS[3];
//     extern int MYID, VERBOSE, IDY;

//     char file[STRING_SIZE], newfile[STRING_SIZE];
//     FILE *fp;
     int i, j, ii, jj;
     float a[NY];

     MPI_File fpout;
     MPI_Offset offset;
     MPI_Status status;

/*     if ( VERBOSE==1 ) {
        if ( MYID==0 ) {
           printf("\n **Message from mergemod (printed by PE %d):\n",MYID);
           printf(" Merge started of %d model files \n", NPROC);
           printf("\n writing merged model file to  %s \n",modfile);
        }
     } */

  /* Every MPI task opens its individual data file*/
//     sprintf( file, "%s.%i.%i", modfile, POS[1], POS[2] );
 //    fp = fopen( file, "r" );

  /* New global output file created/opened */
     MPI_File_open( MPI_COMM_WORLD, modfile, MPI_MODE_CREATE|MPI_MODE_WRONLY, MPI_INFO_NULL, &fpout );

  /* Transfer data from the individual files into the global data file */
     for ( i=0; i<NPROCX; i++ ) {
         offset = i*NYG*NX*sizeof(float);
         for ( ii=1; ii<=NX; ii++ ) {
         for ( j=0; j<NPROCY; j++ ) {

             if ( (POS[1]==i)&(POS[2]==j) ) {
      //          fread( a, sizeof(float), NY, fp );
                for ( jj=1; jj<=NY; jj++ ) { a[jj-1] = data[jj][ii]; }
                MPI_File_write_at( fpout, offset, a, NY, MPI_FLOAT, &status );
             }
             offset += NY*sizeof(float);
             MPI_Barrier( MPI_COMM_WORLD );
         }
         }
     }

  /* Close all data files */
  //   fclose( fp );
     MPI_File_close( &fpout );

/*     if ( VERBOSE==1  ) {
        if ( MYID==0 ) {
           printf(" Use \n");
           printf(" ximage n1=%d < %s  label1=Y label2=X title=%s \n", ((NYG-1)/IDY)+1,modfile,modfile);
           printf(" to visualize model. \n");
        }
     }*/

     return;
}

